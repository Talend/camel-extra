/* Generated by camel build tools - do NOT edit this file! */
package org.apacheextras.camel.component.wmq;

import javax.annotation.processing.Generated;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.spi.ExtendedPropertyConfigurerGetter;
import org.apache.camel.spi.PropertyConfigurerGetter;
import org.apache.camel.spi.ConfigurerStrategy;
import org.apache.camel.spi.GeneratedPropertyConfigurer;
import org.apache.camel.util.CaseInsensitiveMap;
import org.apache.camel.support.component.PropertyConfigurerSupport;

/**
 * Generated by camel build tools - do NOT edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo")
@SuppressWarnings("unchecked")
public class WMQEndpointConfigurer extends PropertyConfigurerSupport implements GeneratedPropertyConfigurer, PropertyConfigurerGetter {

    @Override
    public boolean configure(CamelContext camelContext, Object obj, String name, Object value, boolean ignoreCase) {
        WMQEndpoint target = (WMQEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bodytype":
        case "bodyType": target.setBodyType(property(camelContext, java.lang.String.class, value)); return true;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": target.setBridgeErrorHandler(property(camelContext, boolean.class, value)); return true;
        case "delay": target.setDelay(property(camelContext, int.class, value)); return true;
        case "delayonexception":
        case "delayOnException": target.setDelayOnException(property(camelContext, int.class, value)); return true;
        case "exceptionhandler":
        case "exceptionHandler": target.setExceptionHandler(property(camelContext, org.apache.camel.spi.ExceptionHandler.class, value)); return true;
        case "exchangepattern":
        case "exchangePattern": target.setExchangePattern(property(camelContext, org.apache.camel.ExchangePattern.class, value)); return true;
        case "lazystartproducer":
        case "lazyStartProducer": target.setLazyStartProducer(property(camelContext, boolean.class, value)); return true;
        case "queuemanagerccsid":
        case "queueManagerCCSID": target.setQueueManagerCCSID(property(camelContext, java.lang.String.class, value)); return true;
        case "queuemanagerchannel":
        case "queueManagerChannel": target.setQueueManagerChannel(property(camelContext, java.lang.String.class, value)); return true;
        case "queuemanagerhostname":
        case "queueManagerHostname": target.setQueueManagerHostname(property(camelContext, java.lang.String.class, value)); return true;
        case "queuemanagername":
        case "queueManagerName": target.setQueueManagerName(property(camelContext, java.lang.String.class, value)); return true;
        case "queuemanagerpassword":
        case "queueManagerPassword": target.setQueueManagerPassword(property(camelContext, java.lang.String.class, value)); return true;
        case "queuemanagerport":
        case "queueManagerPort": target.setQueueManagerPort(property(camelContext, java.lang.String.class, value)); return true;
        case "queuemanageruserid":
        case "queueManagerUserID": target.setQueueManagerUserID(property(camelContext, java.lang.String.class, value)); return true;
        default: return false;
        }
    }

    @Override
    public Class<?> getOptionType(String name, boolean ignoreCase) {
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bodytype":
        case "bodyType": return java.lang.String.class;
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return boolean.class;
        case "delay": return int.class;
        case "delayonexception":
        case "delayOnException": return int.class;
        case "exceptionhandler":
        case "exceptionHandler": return org.apache.camel.spi.ExceptionHandler.class;
        case "exchangepattern":
        case "exchangePattern": return org.apache.camel.ExchangePattern.class;
        case "lazystartproducer":
        case "lazyStartProducer": return boolean.class;
        case "queuemanagerccsid":
        case "queueManagerCCSID": return java.lang.String.class;
        case "queuemanagerchannel":
        case "queueManagerChannel": return java.lang.String.class;
        case "queuemanagerhostname":
        case "queueManagerHostname": return java.lang.String.class;
        case "queuemanagername":
        case "queueManagerName": return java.lang.String.class;
        case "queuemanagerpassword":
        case "queueManagerPassword": return java.lang.String.class;
        case "queuemanagerport":
        case "queueManagerPort": return java.lang.String.class;
        case "queuemanageruserid":
        case "queueManagerUserID": return java.lang.String.class;
        default: return null;
        }
    }

    @Override
    public Object getOptionValue(Object obj, String name, boolean ignoreCase) {
        WMQEndpoint target = (WMQEndpoint) obj;
        switch (ignoreCase ? name.toLowerCase() : name) {
        case "bodytype":
        case "bodyType": return target.getBodyType();
        case "bridgeerrorhandler":
        case "bridgeErrorHandler": return target.isBridgeErrorHandler();
        case "delay": return target.getDelay();
        case "delayonexception":
        case "delayOnException": return target.getDelayOnException();
        case "exceptionhandler":
        case "exceptionHandler": return target.getExceptionHandler();
        case "exchangepattern":
        case "exchangePattern": return target.getExchangePattern();
        case "lazystartproducer":
        case "lazyStartProducer": return target.isLazyStartProducer();
        case "queuemanagerccsid":
        case "queueManagerCCSID": return target.getQueueManagerCCSID();
        case "queuemanagerchannel":
        case "queueManagerChannel": return target.getQueueManagerChannel();
        case "queuemanagerhostname":
        case "queueManagerHostname": return target.getQueueManagerHostname();
        case "queuemanagername":
        case "queueManagerName": return target.getQueueManagerName();
        case "queuemanagerpassword":
        case "queueManagerPassword": return target.getQueueManagerPassword();
        case "queuemanagerport":
        case "queueManagerPort": return target.getQueueManagerPort();
        case "queuemanageruserid":
        case "queueManagerUserID": return target.getQueueManagerUserID();
        default: return null;
        }
    }
}

